AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: ""
Resources:
    ECSService:
        DependsOn:
        - EC2SecurityGroup
        - ECSCluster
        - ElasticLoadBalancingV2TargetGroup2
        - ElasticLoadBalancingV2Listener
        Type: "AWS::ECS::Service"
        Properties:
            ServiceName: "tenant-service-service"
            Cluster: !GetAtt ECSCluster.Arn
            LoadBalancers: 
              - 
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup2
                ContainerName: "tenant-service-container"
                ContainerPort: 8080
            DesiredCount: 1
            LaunchType: "FARGATE"
            PlatformVersion: "LATEST"
            TaskDefinition: !Ref ECSTaskDefinition
            DeploymentConfiguration: 
                MaximumPercent: 200
                MinimumHealthyPercent: 100
                DeploymentCircuitBreaker: 
                    Enable: false
                    Rollback: false
            NetworkConfiguration: 
                AwsvpcConfiguration: 
                    AssignPublicIp: "ENABLED"
                    SecurityGroups: 
                      - !Ref EC2SecurityGroup
                    Subnets: 
                      - "subnet-1c831245"
                      - "subnet-297d0f5e"
            HealthCheckGracePeriodSeconds: 0
            SchedulingStrategy: "REPLICA"

    ECSCluster:
        Type: "AWS::ECS::Cluster"
        Properties:
            ClusterName: "sabre-dev"
            ClusterSettings: 
              - 
                Name: "containerInsights"
                Value: "disabled"
            CapacityProviders: 
              - "FARGATE_SPOT"
              - "FARGATE"

    ECSTaskDefinition:
        Type: "AWS::ECS::TaskDefinition"
        Properties:
            ContainerDefinitions: 
              - 
                Environment: 
                  - 
                    Name: "DATABASE_URL"
                    Value: "postgres://postgres:murbanapp@murban.cvpifxuzeuhq.us-east-1.rds.amazonaws.com:5432/tenant_dev"
                Essential: true
                Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/tenant-service:latest"
                LogConfiguration: 
                    LogDriver: "awslogs"
                    Options: 
                        awslogs-group: "/ecs/tenant-service-task"
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: "ecs"
                Name: "tenant-service-container"
                PortMappings: 
                  - 
                    ContainerPort: 8080
                    HostPort: 8080
                    Protocol: "tcp"
            Family: "tenant-service-task"
            TaskRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
            ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
            NetworkMode: "awsvpc"
            RequiresCompatibilities: 
              - "FARGATE"
            Cpu: "256"
            Memory: "512"

    ElasticLoadBalancingV2LoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        DependsOn:
        - EC2SecurityGroup2
        Properties:
            Name: "tenant-service-load-balancer"
            Scheme: "internet-facing"
            Type: "application"
            Subnets: 
              - "subnet-1c831245"
              - "subnet-297d0f5e"
            SecurityGroups: 
              - !Ref EC2SecurityGroup2
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "false"
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              - 
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              - 
                Key: "waf.fail_open.enabled"
                Value: "false"

    ElasticLoadBalancingV2Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 443
            Protocol: "HTTPS"
            SslPolicy: "ELBSecurityPolicy-2016-08"
            Certificates: 
              - 
                CertificateArn: !Sub "arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/e98f2f9e-b1eb-4787-8e1b-6eb22ee01258"
            DefaultActions: 
              - 
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                Type: "forward"

    ElasticLoadBalancingV2Listener2:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions: 
              - 
                Order: 1
                RedirectConfig: 
                    Protocol: "HTTPS"
                    Port: "443"
                    Host: "#{host}"
                    Path: "/#{path}"
                    Query: "#{query}"
                    StatusCode: "HTTP_301"
                Type: "redirect"

    ElasticLoadBalancingV2ListenerRule:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        DependsOn:
        - ElasticLoadBalancingV2Listener
        - ElasticLoadBalancingV2TargetGroup2
        Properties:
            Priority: "1"
            ListenerArn: !Ref ElasticLoadBalancingV2Listener
            Conditions: 
              - 
                Field: "path-pattern"
                Values: 
                  - "/*"
            Actions: 
              - 
                Type: "forward"
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup2
                ForwardConfig: 
                    TargetGroups: 
                      - 
                        TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup2
                        Weight: 1
                    TargetGroupStickinessConfig: 
                        Enabled: false

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 8080
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: "vpc-ee1a3b8b"
            Name: "tenant-service-lb-tg"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    ElasticLoadBalancingV2TargetGroup2:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: "vpc-ee1a3b8b"
            Name: "tenant-service-service-tg"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    EC2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "2021-03-15T00:57:09.688Z"
            GroupName: "tenant-service-service-sg"
            VpcId: "vpc-ee1a3b8b"
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 8080
                IpProtocol: "tcp"
                ToPort: 8080
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup2:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "load-balancer-wizard-2 created on 2021-03-14T20:54:28.457-04:00"
            GroupName: "tenant-service-lb-sg"
            VpcId: "vpc-ee1a3b8b"
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              - 
                CidrIpv6: "::/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    Route53RecordSet:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: phowma.com.
        Comment: Zone apex alias targeted to myELB LoadBalancer.
        RecordSets:
        - Name: tenant-api.phowma.com.
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt 'ElasticLoadBalancingV2LoadBalancer.CanonicalHostedZoneID'
            DNSName: !GetAtt 'ElasticLoadBalancingV2LoadBalancer.DNSName'
