Metadata:
    Generator: "former2"
Description: ""
Parameters:
    HostedZoneId:
      Type: "String"
    Domain:
      Type: "String"
    DomainCode:
      Type: "String"
    BucketName:
      Type: "String"
    CertificateArn:
      Type: "String"
    ApiTargetGroup:
      Type: "String"
    ElasticLoadBalancingV2Listener:
      Type: "String"
    ElasticLoadBalancingV2LoadBalancer:
      Type: "String"
    LambdaBasicExecutionRole:
      Type: "String"
    DNSName:
      Type: "String"
Resources:

    LambdaRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "${DomainCode}-cloudfront-lambda-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"edgelambda.amazonaws.com\",\"lambda.amazonaws.com\"]},\"Action\":\"sts:AssumeRole\"}]}" 
            MaxSessionDuration: 3600
            ManagedPolicyArns:
              - !Sub "arn:aws:iam::${AWS::AccountId}:policy/service-role/AWSLambdaEdgeExecutionRole-9bd5b8cc-21f1-428f-86a2-37fc9dccb9c1"

    LambdaFunctions:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: !Sub "Lambda cloud front functions for ${DomainCode}"
            FunctionName: !Sub "${DomainCode}-remove-api-from-uri"
            Handler: "dist/index.handler"
            Role: !GetAtt LambdaRole.Arn 
            Code:
                S3Bucket: !Sub "${DomainCode}-findingcre-lambda-functions"
                S3Key: "remove-api-from-uri"
            Runtime: "nodejs14.x"
            Timeout: 3
            TracingConfig:
                Mode: "PassThrough"

    LambdaVersion:
        Type: "AWS::Lambda::Version"
        Properties:
            FunctionName: !Ref LambdaFunctions
            Description: "v1"

    CloudFrontDistribution:
        Type: "AWS::CloudFront::Distribution"
        DependsOn:
          - S3Bucket
        Properties:
            DistributionConfig:
                Aliases:
                  - !Sub "www.${Domain}"
                Origins:
                  -
                    ConnectionAttempts: 3
                    ConnectionTimeout: 10
                    DomainName: !Sub "${S3Bucket}.s3.amazonaws.com"
                    Id: !Sub "S3-${DomainCode}-${BucketName}"
                    OriginPath: ""
                    S3OriginConfig:
                        OriginAccessIdentity: ""
                  - 
                    ConnectionAttempts: 3
                    ConnectionTimeout: 10
                    CustomOriginConfig: 
                        HTTPPort: 80
                        HTTPSPort: 443
                        OriginKeepaliveTimeout: 5
                        OriginProtocolPolicy: "https-only"
                        OriginReadTimeout: 30
                        OriginSSLProtocols: 
                          - "TLSv1"
                          - "TLSv1.1"
                          - "TLSv1.2"
                    DomainName: !Ref DNSName 
                    Id: !Ref DNSName 
                    OriginPath: ""

                OriginGroups:
                    Quantity: 0
                DefaultCacheBehavior:
                    AllowedMethods:
                      - "HEAD"
                      - "GET"
                    CachedMethods:
                      - "HEAD"
                      - "GET"
                    Compress: false
                    CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
                    SmoothStreaming: false
                    TargetOriginId: !Sub "S3-${DomainCode}-${BucketName}"
                    ViewerProtocolPolicy: "redirect-to-https"
                CacheBehaviors: 
                  - 
                    AllowedMethods: 
                      - "HEAD"
                      - "DELETE"
                      - "POST"
                      - "GET"
                      - "OPTIONS"
                      - "PUT"
                      - "PATCH"
                    Compress: true
                    CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
                    OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3"
                    LambdaFunctionAssociations: 
                      - 
                        EventType: "viewer-request"
                        LambdaFunctionARN: !Ref LambdaVersion 
                    PathPattern: "/api/*"
                    SmoothStreaming: false
                    TargetOriginId: !Ref DNSName 
                    ViewerProtocolPolicy: "allow-all"

                CustomErrorResponses:
                  -
                    ErrorCode: 403
                    ResponsePagePath: "/index.html"
                    ResponseCode: "200"
                    ErrorCachingMinTTL: 10
                Comment: ""
                PriceClass: "PriceClass_All"
                Enabled: true
                ViewerCertificate:
                    AcmCertificateArn: !Ref CertificateArn 
                    MinimumProtocolVersion: "TLSv1.2_2019"
                    SslSupportMethod: "sni-only"
                Restrictions:
                    GeoRestriction:
                        RestrictionType: "none"
                HttpVersion: "http2"
                DefaultRootObject: "index.html"
                IPV6Enabled: true

    Route53RecordSet:
        Type: "AWS::Route53::RecordSet"
        DependsOn:
          - CloudFrontDistribution
        Properties:
            Name: !Sub "www.${Domain}"
            Type: "A"
            AliasTarget:
                HostedZoneId: "Z2FDTNDATAQYW2" 
                DNSName: !GetAtt
                  - CloudFrontDistribution
                  - DomainName
                EvaluateTargetHealth: false
            HostedZoneId: !Ref HostedZoneId

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "${DomainCode}-${BucketName}"
            WebsiteConfiguration:
                IndexDocument: "index.html"
                ErrorDocument: "index.html"

    S3BucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        DependsOn:
          - S3Bucket
        Properties:
            Bucket: !Ref S3Bucket
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Sid: "AddPerm"
                    Effect: "Allow"
                    Principal: "*"
                    Action: "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${DomainCode}-${BucketName}/*"

    ElasticLoadBalancingV2ListenerRule:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: 1
            ListenerArn: !Ref ElasticLoadBalancingV2Listener
            Conditions:
              -
                Field: "host-header"
                Values:
                  - !Sub "www.${Domain}"
            Actions:
              -
                Type: "forward"
                TargetGroupArn: !Ref ApiTargetGroup
                ForwardConfig:
                    TargetGroups:
                      -
                        TargetGroupArn: !Ref ApiTargetGroup
                        Weight: 1
                    TargetGroupStickinessConfig:
                        Enabled: false

