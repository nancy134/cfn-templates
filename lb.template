AWSTemplateFormatVersion: "2010-09-09"
Description: "Create load balancer"
Parameters:
    DomainCode:
        Type: "String"
    Subnets:
        Type: List<AWS::EC2::Subnet::Id>
    VpcId:
        Type: "String"
    CertificateArn:
        Type: "String"
Resources:
    EC2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: !Sub "${DomainCode}-Security group for the load balancer"
            GroupName: !Sub "${DomainCode}-loadbalancer-sg"
            VpcId: !Ref VpcId 
            SecurityGroupIngress:
              -
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIpv6: "::/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "0.0.0.0/0"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    ElasticLoadBalancingV2LoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: !Sub "${DomainCode}-load-balancer"
            Scheme: "internet-facing"
            Type: "application"
            Subnets: !Ref Subnets 
            SecurityGroups: 
              - !Ref EC2SecurityGroup
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "false"
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              - 
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              - 
                Key: "waf.fail_open.enabled"
                Value: "false"

    ElasticLoadBalancingV2Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 443
            Protocol: "HTTPS"
            SslPolicy: "ELBSecurityPolicy-2016-08"
            Certificates: 
              - 
                CertificateArn: !Ref CertificateArn
            DefaultActions: 
              - 
                Order: 1
                RedirectConfig:
                    Protocol: "HTTPS"
                    Port: "443"
                    Host: "sabre-images.s3.amazonaws.com"
                    Path: "/ErrorPage.html"
                    StatusCode: "HTTP_301"
                Type: "redirect"

    ElasticLoadBalancingV2Listener2:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions: 
              - 
                Order: 1
                RedirectConfig: 
                    Protocol: "HTTPS"
                    Port: "443"
                    Host: "#{host}"
                    Path: "/#{path}"
                    Query: "#{query}"
                    StatusCode: "HTTP_301"
                Type: "redirect"

Outputs:
   ElasticLoadBalancingV2LoadBalancer:
       Description: "Load Balancer"
       Value: !Ref ElasticLoadBalancingV2LoadBalancer
   ElasticLoadBalancingV2Listener:
       Description: "Load Balancer Listener"
       Value: !Ref ElasticLoadBalancingV2Listener 
   HostedZoneId:
       Value: !GetAtt 'ElasticLoadBalancingV2LoadBalancer.CanonicalHostedZoneID'
   DNSName:
       Value: !GetAtt 'ElasticLoadBalancingV2LoadBalancer.DNSName'
